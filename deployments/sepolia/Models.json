{
  "address": "0x52e61459BD41aefA9E1A6915f20CbE7ec70eF1BC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxNumberOftoken",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_VRFADDRESS",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IpfsNFT__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MAX__NUMBER__OF__ETC__OVER__1",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT__IN__WHITE__LIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OVER__MAX__NUM__OF__BES",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "MintRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "MintSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "addWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_degree",
          "type": "int256"
        }
      ],
      "name": "changeERTStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDegree",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDegreeLevel",
      "outputs": [
        {
          "internalType": "enum Models.DegreeState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentDegree",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentWindowState",
      "outputs": [
        {
          "internalType": "enum Models.WindowState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxNumberOftoken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "resToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferWindowState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa354c511e25a1ecc7fd1ac653f476df5461b2fe3c3b8c7bfcb781ec76a01a34b",
  "receipt": {
    "to": null,
    "from": "0x383b2aA0fCB6dd340CF01a5B3F32739719d0f77F",
    "contractAddress": "0x52e61459BD41aefA9E1A6915f20CbE7ec70eF1BC",
    "transactionIndex": 37,
    "gasUsed": "6019981",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000004000000001000000000000000000000000000008000000020000000000000000000800000000000000000000000000000000400000000000000000000001000000000000000000020000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x07b3646a16c80c1f327947629878a16737d09968c22cd11885ea685de060481b",
    "transactionHash": "0xa354c511e25a1ecc7fd1ac653f476df5461b2fe3c3b8c7bfcb781ec76a01a34b",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 4041796,
        "transactionHash": "0xa354c511e25a1ecc7fd1ac653f476df5461b2fe3c3b8c7bfcb781ec76a01a34b",
        "address": "0x52e61459BD41aefA9E1A6915f20CbE7ec70eF1BC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000383b2aa0fcb6dd340cf01a5b3f32739719d0f77f"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0x07b3646a16c80c1f327947629878a16737d09968c22cd11885ea685de060481b"
      }
    ],
    "blockNumber": 4041796,
    "cumulativeGasUsed": "11594396",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    "3889",
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c"
  ],
  "numDeployments": 4,
  "solcInputHash": "7a737455baec70f4ffad868610217b94",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumberOftoken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_VRFADDRESS\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IpfsNFT__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MAX__NUMBER__OF__ETC__OVER__1\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT__IN__WHITE__LIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OVER__MAX__NUM__OF__BES\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"MintRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"MintSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_degree\",\"type\":\"int256\"}],\"name\":\"changeERTStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDegree\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDegreeLevel\",\"outputs\":[{\"internalType\":\"enum Models.DegreeState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDegree\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentWindowState\",\"outputs\":[{\"internalType\":\"enum Models.WindowState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxNumberOftoken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferWindowState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"hardcode for SEPOLIA 0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625  hardcode for Goerli  0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Models.sol\":\"Models\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Models.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\r\\n\\r\\nerror NOT__IN__WHITE__LIST();\\r\\nerror NO__ENOUGH__ETH();\\r\\nerror MAX__NUMBER__OF__ETC__OVER__1();\\r\\nerror OVER__MAX__NUM__OF__BES();\\r\\nerror IpfsNFT__TransferFailed();\\r\\n\\r\\ncontract Models is\\r\\n    ERC721,\\r\\n    ERC721Enumerable,\\r\\n    ERC721URIStorage,\\r\\n    Ownable,\\r\\n    VRFConsumerBaseV2\\r\\n{\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    mapping(uint => string[]) private allMetaData;\\r\\n    uint private lengthOfMetaData;\\r\\n\\r\\n    mapping(address => bool) private whiteList;\\r\\n\\r\\n    uint private immutable maxNumberOftoken;\\r\\n\\r\\n    WindowState private currentWindowState;\\r\\n\\r\\n    //All variables blow are belong to VRF\\r\\n    VRFCoordinatorV2Interface COORDINATOR;\\r\\n\\r\\n    // Your subscription ID.\\r\\n    uint64 immutable s_subscriptionId;\\r\\n\\r\\n    // bytes32 keyHash = Sepolia 0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c;\\r\\n    // Goerli 0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15\\r\\n    bytes32 immutable keyHash;\\r\\n    uint32 public immutable callbackGasLimit;\\r\\n\\r\\n    // The default is 3, but you can set this higher.\\r\\n    uint16 constant requestConfirmations = 3;\\r\\n\\r\\n    // For this example, retrieve 2 random values in one request.\\r\\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\\r\\n    uint32 constant numWords = 1;\\r\\n\\r\\n    /* requestId --> NFT TOKEN */\\r\\n    mapping(uint256 => uint) public resToToken;\\r\\n\\r\\n    // configure a default value for 10\\r\\n    int256 public currentDegree = 20;\\r\\n\\r\\n    // configure a default value for Warm\\r\\n    DegreeState public currentDegreeLevel = DegreeState.Warm;\\r\\n\\r\\n    mapping(uint => uint) tokenIdtoModeValue;\\r\\n\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    enum WindowState {\\r\\n        PreMintWindow,\\r\\n        MintWindow\\r\\n    }\\r\\n\\r\\n    enum DegreeState {\\r\\n        Warm, // 15< x > 30\\r\\n        Hot, // 30 <= x\\r\\n        Cool, // 5 < x >= 15\\r\\n        Cold // x <=5\\r\\n    }\\r\\n\\r\\n    event MintRequest(uint256 indexed requestId);\\r\\n    event MintSuccess(uint256 indexed requestId);\\r\\n\\r\\n    /**\\r\\n     *  hardcode for SEPOLIA 0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625\\r\\n     *  hardcode for Goerli  0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D\\r\\n     * */\\r\\n    constructor(\\r\\n        uint _maxNumberOftoken,\\r\\n        uint64 _subscriptionId,\\r\\n        address _VRFADDRESS,\\r\\n        bytes32 _keyHash\\r\\n    ) ERC721(\\\"MODELS\\\", \\\"MDS\\\") VRFConsumerBaseV2(_VRFADDRESS) {\\r\\n        COORDINATOR = VRFCoordinatorV2Interface(_VRFADDRESS);\\r\\n        keyHash = _keyHash;\\r\\n        s_subscriptionId = _subscriptionId;\\r\\n        currentWindowState = WindowState.PreMintWindow;\\r\\n        callbackGasLimit = 250000;\\r\\n        maxNumberOftoken = _maxNumberOftoken;\\r\\n        string[] storage AliPics = allMetaData[0];\\r\\n        AliPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmRaYSHrPyKyvMbtWGh9WCEQkqbgRtVh3wPezKzwBkMWXL\\\"\\r\\n        );\\r\\n        AliPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/Qmbs3QcGaKao9pPszzuYqsrUhEKC6nh1sXQrPRYpp2fx3G\\\"\\r\\n        );\\r\\n        AliPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmRs3fNGpwkXfYkcojDrV8inp3NGWAX9Cj41Y1321ZTpoL\\\"\\r\\n        );\\r\\n        AliPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmaFL6iYQ2KvYFsVDEfcAKg3ApdX7Gc1AmfRznuaU6CYPy\\\"\\r\\n        );\\r\\n        string[] storage HarshPics = allMetaData[1];\\r\\n        HarshPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmV33JkRRmRJVyx5cMJMsdhjLFmhFqceNNidXQVQ4n59cE\\\"\\r\\n        );\\r\\n        HarshPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmTAPAPPuz8x5uDfVAYdqquX8aK1MozKgGyjzYDah3L5sp\\\"\\r\\n        );\\r\\n        HarshPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmZNZ9JhSH1Z26sMpMbzCBf3VzPogkDMtuXWWS9ceb5fNx\\\"\\r\\n        );\\r\\n        HarshPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/Qmbj3ztbvQq2PAkCcreVZfBt1699cDSrWwZRN9CVCezfYA\\\"\\r\\n        );\\r\\n        string[] storage MyicahelPics = allMetaData[2];\\r\\n        MyicahelPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmVsuhSmR5BmuaNCghUvX3B397yyKHNkS5PWMKyCbs2maj\\\"\\r\\n        );\\r\\n        MyicahelPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmX4SLs4SAWpk2RStDxw29mzkMZwDkeEjKFxZqEuhoXo9v\\\"\\r\\n        );\\r\\n        MyicahelPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmTh3FT6sTe9KfDVv61Zf3J3Qy9YFP4m69UGZddZ4deKNi\\\"\\r\\n        );\\r\\n        MyicahelPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmPLdY8Me41618WhaqLickpwXrzYx5vPHienELhBbJt9hj\\\"\\r\\n        );\\r\\n        string[] storage KietPics = allMetaData[3];\\r\\n        KietPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmfLV6wQDh8kCZxUM7sYhK8BdVrzJ2fK7GUGfpvHtXxGPA\\\"\\r\\n        );\\r\\n        KietPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmYRdwqFo3p1EEDZuJf9MBQuFNcNHup9zD751WQAaBSSM1\\\"\\r\\n        );\\r\\n        KietPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmSnZT33AkmGuUEyrMf6P8qjFV7N7oubAjSvh2BfEiHVAv\\\"\\r\\n        );\\r\\n        KietPics.push(\\r\\n            \\\"https://ipfs.filebase.io/ipfs/QmYBFkTDRdhk6qHhHPEQvERTd7DAFxp5fecReNXxiEUUs7\\\"\\r\\n        );\\r\\n        lengthOfMetaData = 4;\\r\\n    }\\r\\n\\r\\n    modifier onlyPreMintWindow() {\\r\\n        require(\\r\\n            currentWindowState == WindowState.PreMintWindow,\\r\\n            \\\"PreMint has not opened yet!\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMintWindow() {\\r\\n        require(\\r\\n            currentWindowState == WindowState.MintWindow,\\r\\n            \\\"Mint has not opened yet!\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint() public payable onlyMintWindow {\\r\\n        require(\\r\\n            msg.value == 0.0005 ether,\\r\\n            \\\" The price of each MDS is 0.0005 ether.\\\"\\r\\n        );\\r\\n        if (balanceOf(msg.sender) >= 1) revert MAX__NUMBER__OF__ETC__OVER__1();\\r\\n        if (totalSupply() >= maxNumberOftoken) revert OVER__MAX__NUM__OF__BES();\\r\\n        request();\\r\\n    }\\r\\n\\r\\n    function preMint() public payable onlyPreMintWindow {\\r\\n        require(\\r\\n            msg.value == 0.0001 ether,\\r\\n            \\\" The price of each MDS is 0.0001 ether.\\\"\\r\\n        );\\r\\n        if (!whiteList[msg.sender]) revert NOT__IN__WHITE__LIST();\\r\\n        if (balanceOf(msg.sender) >= 1) revert MAX__NUMBER__OF__ETC__OVER__1();\\r\\n        if (totalSupply() >= maxNumberOftoken) revert OVER__MAX__NUM__OF__BES();\\r\\n        request();\\r\\n    }\\r\\n\\r\\n    function addWhiteList(address[] calldata addresses) public onlyOwner {\\r\\n        for (uint i = 0; i < addresses.length; i++) {\\r\\n            whiteList[addresses[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferWindowState() public onlyOwner {\\r\\n        if (currentWindowState == WindowState.PreMintWindow) {\\r\\n            currentWindowState = WindowState.MintWindow;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCurrentWindowState() public view returns (WindowState) {\\r\\n        return currentWindowState;\\r\\n    }\\r\\n\\r\\n    function getMaxNumberOftoken() public view returns (uint) {\\r\\n        return maxNumberOftoken;\\r\\n    }\\r\\n\\r\\n    // Assumes the subscription is funded sufficiently.\\r\\n    function request() internal returns (uint256 requestId) {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n\\r\\n        // Will revert if subscription is not set and funded.\\r\\n        // Will revert if subscription is not set and funded.\\r\\n        requestId = COORDINATOR.requestRandomWords(\\r\\n            keyHash,\\r\\n            s_subscriptionId,\\r\\n            requestConfirmations,\\r\\n            callbackGasLimit,\\r\\n            numWords\\r\\n        );\\r\\n        // don't put _safeMint function in fulfillRandomWords,it'll cost more gas than the callbackGasLimit you configured\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n        resToToken[requestId] = tokenId;\\r\\n        emit MintRequest(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 _requestId,\\r\\n        uint256[] memory _randomWords\\r\\n    ) internal override {\\r\\n        // obtain a mode value\\r\\n        uint256 modeValue = (_randomWords[0] % lengthOfMetaData);\\r\\n        uint tokenId = resToToken[_requestId];\\r\\n        tokenIdtoModeValue[tokenId] = modeValue;\\r\\n\\r\\n        // According to the metadata configured above,use the index 0 of the pic array as default pic\\r\\n        _setTokenURI(tokenId, allMetaData[modeValue][uint8(DegreeState.Warm)]);\\r\\n        emit MintSuccess(_requestId);\\r\\n    }\\r\\n\\r\\n    function changeERTStatus(int256 _degree) public {\\r\\n        // Compare the discrepancy between new degree and current degree\\r\\n        if (_degree != currentDegree) {\\r\\n            // if there has the discrepancy then change the lastest degree to currentDegree\\r\\n            currentDegree = _degree;\\r\\n            // Compare the degreelevel between new degree and current degree\\r\\n            DegreeState newDegreeLevel = checkWheatherLevel(_degree);\\r\\n            if (newDegreeLevel != currentDegreeLevel) {\\r\\n                // // if there has the discrepancy then change the lastest degree level to current degree level\\r\\n                currentDegreeLevel = newDegreeLevel;\\r\\n                // update the metadata of ERCs\\r\\n                uint totalSupply = totalSupply();\\r\\n                for (uint i = 0; i < totalSupply; i++) {\\r\\n                    // i == tokenId\\r\\n                    uint modeValue = tokenIdtoModeValue[i];\\r\\n                    _setTokenURI(\\r\\n                        i,\\r\\n                        allMetaData[modeValue][uint8(currentDegreeLevel)]\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkWheatherLevel(\\r\\n        int256 _degree\\r\\n    ) private pure returns (DegreeState) {\\r\\n        //    Warm, // 15< x > 30\\r\\n        // Hot, // 30 <= x\\r\\n        // Cool, // 5 < x >= 15\\r\\n        // Cold // x <=5\\r\\n        if (_degree >= 30 * 100) {\\r\\n            return DegreeState.Hot;\\r\\n        } else if (_degree > 15 * 100) {\\r\\n            return DegreeState.Warm;\\r\\n        } else if (_degree > 5 * 100) {\\r\\n            return DegreeState.Cool;\\r\\n        } else {\\r\\n            return DegreeState.Cold;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        (bool success, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert IpfsNFT__TransferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCurrentDegree() public view returns (int256) {\\r\\n        return currentDegree;\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 batchSize\\r\\n    ) internal override(ERC721, ERC721Enumerable) {\\r\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\r\\n    }\\r\\n\\r\\n    function _burn(\\r\\n        uint256 tokenId\\r\\n    ) internal override(ERC721, ERC721URIStorage) {\\r\\n        super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable, ERC721URIStorage)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48c766a9eba0e0023c0153d83ab020855c2b771688c8b91c0517b9e6241aa334\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405260146011556000601260006101000a81548160ff0219169083600381111562000033576200003262000809565b5b02179055503480156200004557600080fd5b5060405162005f4738038062005f4783398181016040528101906200006b91906200095d565b816040518060400160405280600681526020017f4d4f44454c5300000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d445300000000000000000000000000000000000000000000000000000000008152508160009081620000e9919062000c3f565b508060019081620000fb919062000c3f565b5050506200011e620001126200073b60201b60201c565b6200074360201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505081600f60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060e081815250508267ffffffffffffffff1660c08167ffffffffffffffff16815250506000600f60006101000a81548160ff02191690836001811115620001e157620001e062000809565b5b02179055506203d09063ffffffff166101008163ffffffff16815250508360a081815250506000600c600080815260200190815260200160002090508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005d33604c91399091909150908162000268919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005c4f604c913990919091509081620002b4919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005bb7604c91399091909150908162000300919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005ad3604c9139909190915090816200034c919062000c3f565b506000600c60006001815260200190815260200160002090508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005d7f604c913990919091509081620003b0919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005e63604c913990919091509081620003fc919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005c03604c91399091909150908162000448919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005a87604c91399091909150908162000494919062000c3f565b506000600c60006002815260200190815260200160002090508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005ce7604c913990919091509081620004f8919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005dcb604c91399091909150908162000544919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005eaf604c91399091909150908162000590919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005b6b604c913990919091509081620005dc919062000c3f565b506000600c60006003815260200190815260200160002090508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005b1f604c91399091909150908162000640919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005e17604c9139909190915090816200068c919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005c9b604c913990919091509081620006d8919062000c3f565b508080600181540180825580915050600190039060005260206000200160006040518060800160405280604c815260200162005efb604c91399091909150908162000724919062000c3f565b506004600d81905550505050505050505062000d26565b600033905090565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b6000819050919050565b62000852816200083d565b81146200085e57600080fd5b50565b600081519050620008728162000847565b92915050565b600067ffffffffffffffff82169050919050565b620008978162000878565b8114620008a357600080fd5b50565b600081519050620008b7816200088c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008ea82620008bd565b9050919050565b620008fc81620008dd565b81146200090857600080fd5b50565b6000815190506200091c81620008f1565b92915050565b6000819050919050565b620009378162000922565b81146200094357600080fd5b50565b60008151905062000957816200092c565b92915050565b600080600080608085870312156200097a576200097962000838565b5b60006200098a8782880162000861565b94505060206200099d87828801620008a6565b9350506040620009b0878288016200090b565b9250506060620009c38782880162000946565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000a5157607f821691505b60208210810362000a675762000a6662000a09565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000ad17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000a92565b62000add868362000a92565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000b2062000b1a62000b14846200083d565b62000af5565b6200083d565b9050919050565b6000819050919050565b62000b3c8362000aff565b62000b5462000b4b8262000b27565b84845462000a9f565b825550505050565b600090565b62000b6b62000b5c565b62000b7881848462000b31565b505050565b5b8181101562000ba05762000b9460008262000b61565b60018101905062000b7e565b5050565b601f82111562000bef5762000bb98162000a6d565b62000bc48462000a82565b8101602085101562000bd4578190505b62000bec62000be38562000a82565b83018262000b7d565b50505b505050565b600082821c905092915050565b600062000c146000198460080262000bf4565b1980831691505092915050565b600062000c2f838362000c01565b9150826002028217905092915050565b62000c4a82620009cf565b67ffffffffffffffff81111562000c665762000c65620009da565b5b62000c72825462000a38565b62000c7f82828562000ba4565b600060209050601f83116001811462000cb7576000841562000ca2578287015190505b62000cae858262000c21565b86555062000d1e565b601f19841662000cc78662000a6d565b60005b8281101562000cf15784890151825560018201915060208501945060208101905062000cca565b8683101562000d11578489015162000d0d601f89168262000c01565b8355505b6001600288020188555050505b505050505050565b60805160a05160c05160e05161010051614d0062000d8760003960008181610c1e0152611913015260006118cf015260006118f0015260008181610a8601528181610f9c015261153d015260008181610afe0152610b520152614d006000f3fe6080604052600436106101ee5760003560e01c806359737ee11161010d578063997dc32e116100a0578063c25c8c9e1161006f578063c25c8c9e1461068a578063c87b56dd146106b5578063e985e9c5146106f2578063f2fde38b1461072f578063f622e7fb14610758576101ee565b8063997dc32e146105d0578063a22cb4651461060d578063ac89d78414610636578063b88d4fde14610661576101ee565b8063715018a6116100dc578063715018a6146105385780637db0b1ff1461054f5780638da5cb5b1461057a57806395d89b41146105a5576101ee565b806359737ee11461046c5780635e1045ec146104955780636352211e146104be57806370a08231146104fb576101ee565b806324f74697116101855780633ccfd60b116101545780633ccfd60b146103f25780633cd29ac8146103fc57806342842e0e146104065780634f6ccce71461042f576101ee565b806324f74697146103485780632f745c59146103735780632fa5cee6146103b057806332871022146103db576101ee565b80631249c58b116101c15780631249c58b146102c157806318160ddd146102cb5780631fe543e3146102f657806323b872dd1461031f576101ee565b806301ffc9a7146101f357806306fdde0314610230578063081812fc1461025b578063095ea7b314610298575b600080fd5b3480156101ff57600080fd5b5061021a6004803603810190610215919061321d565b610783565b6040516102279190613265565b60405180910390f35b34801561023c57600080fd5b50610245610795565b6040516102529190613310565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d9190613368565b610827565b60405161028f91906133d6565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba919061341d565b61086d565b005b6102c9610984565b005b3480156102d757600080fd5b506102e0610aef565b6040516102ed919061346c565b60405180910390f35b34801561030257600080fd5b5061031d600480360381019061031891906135cf565b610afc565b005b34801561032b57600080fd5b506103466004803603810190610341919061362b565b610bbc565b005b34801561035457600080fd5b5061035d610c1c565b60405161036a919061369d565b60405180910390f35b34801561037f57600080fd5b5061039a6004803603810190610395919061341d565b610c40565b6040516103a7919061346c565b60405180910390f35b3480156103bc57600080fd5b506103c5610ce5565b6040516103d2919061372f565b60405180910390f35b3480156103e757600080fd5b506103f0610cf8565b005b6103fa610d69565b005b610404610e17565b005b34801561041257600080fd5b5061042d6004803603810190610428919061362b565b611005565b005b34801561043b57600080fd5b5061045660048036038101906104519190613368565b611025565b604051610463919061346c565b60405180910390f35b34801561047857600080fd5b50610493600480360381019061048e9190613780565b611096565b005b3480156104a157600080fd5b506104bc60048036038101906104b79190613808565b611247565b005b3480156104ca57600080fd5b506104e560048036038101906104e09190613368565b6112f4565b6040516104f291906133d6565b60405180910390f35b34801561050757600080fd5b50610522600480360381019061051d9190613855565b61137a565b60405161052f919061346c565b60405180910390f35b34801561054457600080fd5b5061054d611431565b005b34801561055b57600080fd5b50610564611445565b6040516105719190613891565b60405180910390f35b34801561058657600080fd5b5061058f61144f565b60405161059c91906133d6565b60405180910390f35b3480156105b157600080fd5b506105ba611479565b6040516105c79190613310565b60405180910390f35b3480156105dc57600080fd5b506105f760048036038101906105f29190613368565b61150b565b604051610604919061346c565b60405180910390f35b34801561061957600080fd5b50610634600480360381019061062f91906138d8565b611523565b005b34801561064257600080fd5b5061064b611539565b604051610658919061346c565b60405180910390f35b34801561066d57600080fd5b50610688600480360381019061068391906139cd565b611561565b005b34801561069657600080fd5b5061069f6115c3565b6040516106ac9190613a98565b60405180910390f35b3480156106c157600080fd5b506106dc60048036038101906106d79190613368565b6115da565b6040516106e99190613310565b60405180910390f35b3480156106fe57600080fd5b5061071960048036038101906107149190613ab3565b6115ec565b6040516107269190613265565b60405180910390f35b34801561073b57600080fd5b5061075660048036038101906107519190613855565b611680565b005b34801561076457600080fd5b5061076d611703565b60405161077a9190613891565b60405180910390f35b600061078e82611709565b9050919050565b6060600080546107a490613b22565b80601f01602080910402602001604051908101604052809291908181526020018280546107d090613b22565b801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b5050505050905090565b60006108328261176a565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610878826112f4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df90613bc5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109076117b5565b73ffffffffffffffffffffffffffffffffffffffff1614806109365750610935816109306117b5565b6115ec565b5b610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096c90613c57565b60405180910390fd5b61097f83836117bd565b505050565b600180811115610997576109966136b8565b5b600f60009054906101000a900460ff1660018111156109b9576109b86136b8565b5b146109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f090613cc3565b60405180910390fd5b6601c6bf526340003414610a42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3990613d55565b60405180910390fd5b6001610a4d3361137a565b10610a84576040517f09a6739300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000610aad610aef565b10610ae4576040517f913b742100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aec611876565b50565b6000600880549050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bae57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610ba5929190613d75565b60405180910390fd5b610bb882826119ec565b5050565b610bcd610bc76117b5565b82611b53565b610c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0390613e10565b60405180910390fd5b610c17838383611be8565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610c4b8361137a565b8210610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8390613ea2565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b601260009054906101000a900460ff1681565b610d00611ee1565b60006001811115610d1457610d136136b8565b5b600f60009054906101000a900460ff166001811115610d3657610d356136b8565b5b03610d67576001600f60006101000a81548160ff02191690836001811115610d6157610d606136b8565b5b02179055505b565b610d71611ee1565b60003373ffffffffffffffffffffffffffffffffffffffff1647604051610d9790613ef3565b60006040518083038185875af1925050503d8060008114610dd4576040519150601f19603f3d011682016040523d82523d6000602084013e610dd9565b606091505b5050905080610e14576040517f65a0789500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006001811115610e2b57610e2a6136b8565b5b600f60009054906101000a900460ff166001811115610e4d57610e4c6136b8565b5b14610e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8490613f54565b60405180910390fd5b655af3107a40003414610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc90613fe6565b60405180910390fd5b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f58576040517f404074ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001610f633361137a565b10610f9a576040517f09a6739300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000610fc3610aef565b10610ffa576040517f913b742100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611002611876565b50565b61102083838360405180602001604052806000815250611561565b505050565b600061102f610aef565b8210611070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106790614078565b60405180910390fd5b6008828154811061108457611083614098565b5b90600052602060002001549050919050565b6011548114611244578060118190555060006110b182611f5f565b9050601260009054906101000a900460ff1660038111156110d5576110d46136b8565b5b8160038111156110e8576110e76136b8565b5b146112425780601260006101000a81548160ff02191690836003811115611112576111116136b8565b5b02179055506000611121610aef565b905060005b8181101561123f5760006013600083815260200190815260200160002054905061122b82600c6000848152602001908152602001600020601260009054906101000a900460ff16600381111561117f5761117e6136b8565b5b60ff168154811061119357611192614098565b5b9060005260206000200180546111a890613b22565b80601f01602080910402602001604051908101604052809291908181526020018280546111d490613b22565b80156112215780601f106111f657610100808354040283529160200191611221565b820191906000526020600020905b81548152906001019060200180831161120457829003601f168201915b5050505050611fa3565b508080611237906140f6565b915050611126565b50505b505b50565b61124f611ee1565b60005b828290508110156112ef576001600e600085858581811061127657611275614098565b5b905060200201602081019061128b9190613855565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806112e7906140f6565b915050611252565b505050565b60008061130083612047565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611371576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113689061418a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e19061421c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611439611ee1565b6114436000612084565b565b6000601154905090565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461148890613b22565b80601f01602080910402602001604051908101604052809291908181526020018280546114b490613b22565b80156115015780601f106114d657610100808354040283529160200191611501565b820191906000526020600020905b8154815290600101906020018083116114e457829003601f168201915b5050505050905090565b60106020528060005260406000206000915090505481565b61153561152e6117b5565b838361214a565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61157261156c6117b5565b83611b53565b6115b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a890613e10565b60405180910390fd5b6115bd848484846122b6565b50505050565b6000600f60009054906101000a900460ff16905090565b60606115e582612312565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611688611ee1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ee906142ae565b60405180910390fd5b61170081612084565b50565b60115481565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611763575061176282612424565b5b9050919050565b6117738161249e565b6117b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a99061418a565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611830836112f4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061188360146124df565b905061188f60146124ed565b600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401611954959493929190614327565b6020604051808303816000875af1158015611973573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611997919061438f565b91506119a33382612503565b806010600084815260200190815260200160002081905550817f7b0e05fbeb1edccdd44bd586d531628f90b83bc34de187a0b063ef548a779ac060405160405180910390a25090565b6000600d5482600081518110611a0557611a04614098565b5b6020026020010151611a1791906143eb565b9050600060106000858152602001908152602001600020549050816013600083815260200190815260200160002081905550611b2081600c600085815260200190815260200160002060006003811115611a7457611a736136b8565b5b60ff1681548110611a8857611a87614098565b5b906000526020600020018054611a9d90613b22565b80601f0160208091040260200160405190810160405280929190818152602001828054611ac990613b22565b8015611b165780601f10611aeb57610100808354040283529160200191611b16565b820191906000526020600020905b815481529060010190602001808311611af957829003601f168201915b5050505050611fa3565b837fdd779ccd34929e417fc56a3ffb2acea0e3ce9ff756ef2107f4a75b6b00132aeb60405160405180910390a250505050565b600080611b5f836112f4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ba15750611ba081856115ec565b5b80611bdf57508373ffffffffffffffffffffffffffffffffffffffff16611bc784610827565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611c08826112f4565b73ffffffffffffffffffffffffffffffffffffffff1614611c5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c559061448e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ccd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc490614520565b60405180910390fd5b611cda8383836001612521565b8273ffffffffffffffffffffffffffffffffffffffff16611cfa826112f4565b73ffffffffffffffffffffffffffffffffffffffff1614611d50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d479061448e565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611edc8383836001612533565b505050565b611ee96117b5565b73ffffffffffffffffffffffffffffffffffffffff16611f0761144f565b73ffffffffffffffffffffffffffffffffffffffff1614611f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f549061458c565b60405180910390fd5b565b6000610bb88212611f735760019050611f9e565b6105dc821315611f865760009050611f9e565b6101f4821315611f995760029050611f9e565b600390505b919050565b611fac8261249e565b611feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe29061461e565b60405180910390fd5b80600a6000848152602001908152602001600020908161200b91906147ea565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161203b919061346c565b60405180910390a15050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036121b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121af90614908565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516122a99190613265565b60405180910390a3505050565b6122c1848484611be8565b6122cd84848484612539565b61230c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123039061499a565b60405180910390fd5b50505050565b606061231d8261176a565b6000600a6000848152602001908152602001600020805461233d90613b22565b80601f016020809104026020016040519081016040528092919081815260200182805461236990613b22565b80156123b65780601f1061238b576101008083540402835291602001916123b6565b820191906000526020600020905b81548152906001019060200180831161239957829003601f168201915b5050505050905060006123c76126c0565b905060008151036123dc57819250505061241f565b6000825111156124115780826040516020016123f99291906149f6565b6040516020818303038152906040529250505061241f565b61241a846126d7565b925050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061249757506124968261273f565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166124c083612047565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b61251d828260405180602001604052806000815250612821565b5050565b61252d8484848461287c565b50505050565b50505050565b600061255a8473ffffffffffffffffffffffffffffffffffffffff166129da565b156126b3578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026125836117b5565b8786866040518563ffffffff1660e01b81526004016125a59493929190614a6f565b6020604051808303816000875af19250505080156125e157506040513d601f19601f820116820180604052508101906125de9190614ad0565b60015b612663573d8060008114612611576040519150601f19603f3d011682016040523d82523d6000602084013e612616565b606091505b50600081510361265b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126529061499a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506126b8565b600190505b949350505050565b606060405180602001604052806000815250905090565b60606126e28261176a565b60006126ec6126c0565b9050600081511161270c5760405180602001604052806000815250612737565b80612716846129fd565b6040516020016127279291906149f6565b6040516020818303038152906040525b915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061280a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061281a575061281982612acb565b5b9050919050565b61282b8383612b35565b6128386000848484612539565b612877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286e9061499a565b60405180910390fd5b505050565b61288884848484612d52565b60018111156128cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c390614b6f565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036129135761290e81612d58565b612952565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612951576129508582612da1565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036129945761298f81612f0e565b6129d3565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146129d2576129d18482612fdf565b5b5b5050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060006001612a0c8461305e565b01905060008167ffffffffffffffff811115612a2b57612a2a61348c565b5b6040519080825280601f01601f191660200182016040528015612a5d5781602001600182028036833780820191505090505b509050600082602001820190505b600115612ac0578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612ab457612ab36143bc565b5b04945060008503612a6b575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b9b90614bdb565b60405180910390fd5b612bad8161249e565b15612bed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be490614c47565b60405180910390fd5b612bfb600083836001612521565b612c048161249e565b15612c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3b90614c47565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612d4e600083836001612533565b5050565b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612dae8461137a565b612db89190614c67565b9050600060076000848152602001908152602001600020549050818114612e9d576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612f229190614c67565b9050600060096000848152602001908152602001600020549050600060088381548110612f5257612f51614098565b5b906000526020600020015490508060088381548110612f7457612f73614098565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612fc357612fc2614c9b565b5b6001900381819060005260206000200160009055905550505050565b6000612fea8361137a565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106130bc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816130b2576130b16143bc565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106130f9576d04ee2d6d415b85acef810000000083816130ef576130ee6143bc565b5b0492506020810190505b662386f26fc10000831061312857662386f26fc10000838161311e5761311d6143bc565b5b0492506010810190505b6305f5e1008310613151576305f5e1008381613147576131466143bc565b5b0492506008810190505b612710831061317657612710838161316c5761316b6143bc565b5b0492506004810190505b60648310613199576064838161318f5761318e6143bc565b5b0492506002810190505b600a83106131a8576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131fa816131c5565b811461320557600080fd5b50565b600081359050613217816131f1565b92915050565b600060208284031215613233576132326131bb565b5b600061324184828501613208565b91505092915050565b60008115159050919050565b61325f8161324a565b82525050565b600060208201905061327a6000830184613256565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156132ba57808201518184015260208101905061329f565b60008484015250505050565b6000601f19601f8301169050919050565b60006132e282613280565b6132ec818561328b565b93506132fc81856020860161329c565b613305816132c6565b840191505092915050565b6000602082019050818103600083015261332a81846132d7565b905092915050565b6000819050919050565b61334581613332565b811461335057600080fd5b50565b6000813590506133628161333c565b92915050565b60006020828403121561337e5761337d6131bb565b5b600061338c84828501613353565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006133c082613395565b9050919050565b6133d0816133b5565b82525050565b60006020820190506133eb60008301846133c7565b92915050565b6133fa816133b5565b811461340557600080fd5b50565b600081359050613417816133f1565b92915050565b60008060408385031215613434576134336131bb565b5b600061344285828601613408565b925050602061345385828601613353565b9150509250929050565b61346681613332565b82525050565b6000602082019050613481600083018461345d565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134c4826132c6565b810181811067ffffffffffffffff821117156134e3576134e261348c565b5b80604052505050565b60006134f66131b1565b905061350282826134bb565b919050565b600067ffffffffffffffff8211156135225761352161348c565b5b602082029050602081019050919050565b600080fd5b600061354b61354684613507565b6134ec565b9050808382526020820190506020840283018581111561356e5761356d613533565b5b835b8181101561359757806135838882613353565b845260208401935050602081019050613570565b5050509392505050565b600082601f8301126135b6576135b5613487565b5b81356135c6848260208601613538565b91505092915050565b600080604083850312156135e6576135e56131bb565b5b60006135f485828601613353565b925050602083013567ffffffffffffffff811115613615576136146131c0565b5b613621858286016135a1565b9150509250929050565b600080600060608486031215613644576136436131bb565b5b600061365286828701613408565b935050602061366386828701613408565b925050604061367486828701613353565b9150509250925092565b600063ffffffff82169050919050565b6136978161367e565b82525050565b60006020820190506136b2600083018461368e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106136f8576136f76136b8565b5b50565b6000819050613709826136e7565b919050565b6000613719826136fb565b9050919050565b6137298161370e565b82525050565b60006020820190506137446000830184613720565b92915050565b6000819050919050565b61375d8161374a565b811461376857600080fd5b50565b60008135905061377a81613754565b92915050565b600060208284031215613796576137956131bb565b5b60006137a48482850161376b565b91505092915050565b600080fd5b60008083601f8401126137c8576137c7613487565b5b8235905067ffffffffffffffff8111156137e5576137e46137ad565b5b60208301915083602082028301111561380157613800613533565b5b9250929050565b6000806020838503121561381f5761381e6131bb565b5b600083013567ffffffffffffffff81111561383d5761383c6131c0565b5b613849858286016137b2565b92509250509250929050565b60006020828403121561386b5761386a6131bb565b5b600061387984828501613408565b91505092915050565b61388b8161374a565b82525050565b60006020820190506138a66000830184613882565b92915050565b6138b58161324a565b81146138c057600080fd5b50565b6000813590506138d2816138ac565b92915050565b600080604083850312156138ef576138ee6131bb565b5b60006138fd85828601613408565b925050602061390e858286016138c3565b9150509250929050565b600080fd5b600067ffffffffffffffff8211156139385761393761348c565b5b613941826132c6565b9050602081019050919050565b82818337600083830152505050565b600061397061396b8461391d565b6134ec565b90508281526020810184848401111561398c5761398b613918565b5b61399784828561394e565b509392505050565b600082601f8301126139b4576139b3613487565b5b81356139c484826020860161395d565b91505092915050565b600080600080608085870312156139e7576139e66131bb565b5b60006139f587828801613408565b9450506020613a0687828801613408565b9350506040613a1787828801613353565b925050606085013567ffffffffffffffff811115613a3857613a376131c0565b5b613a448782880161399f565b91505092959194509250565b60028110613a6157613a606136b8565b5b50565b6000819050613a7282613a50565b919050565b6000613a8282613a64565b9050919050565b613a9281613a77565b82525050565b6000602082019050613aad6000830184613a89565b92915050565b60008060408385031215613aca57613ac96131bb565b5b6000613ad885828601613408565b9250506020613ae985828601613408565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613b3a57607f821691505b602082108103613b4d57613b4c613af3565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613baf60218361328b565b9150613bba82613b53565b604082019050919050565b60006020820190508181036000830152613bde81613ba2565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613c41603d8361328b565b9150613c4c82613be5565b604082019050919050565b60006020820190508181036000830152613c7081613c34565b9050919050565b7f4d696e7420686173206e6f74206f70656e656420796574210000000000000000600082015250565b6000613cad60188361328b565b9150613cb882613c77565b602082019050919050565b60006020820190508181036000830152613cdc81613ca0565b9050919050565b7f20546865207072696365206f662065616368204d445320697320302e3030303560008201527f2065746865722e00000000000000000000000000000000000000000000000000602082015250565b6000613d3f60278361328b565b9150613d4a82613ce3565b604082019050919050565b60006020820190508181036000830152613d6e81613d32565b9050919050565b6000604082019050613d8a60008301856133c7565b613d9760208301846133c7565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000613dfa602d8361328b565b9150613e0582613d9e565b604082019050919050565b60006020820190508181036000830152613e2981613ded565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613e8c602b8361328b565b9150613e9782613e30565b604082019050919050565b60006020820190508181036000830152613ebb81613e7f565b9050919050565b600081905092915050565b50565b6000613edd600083613ec2565b9150613ee882613ecd565b600082019050919050565b6000613efe82613ed0565b9150819050919050565b7f5072654d696e7420686173206e6f74206f70656e656420796574210000000000600082015250565b6000613f3e601b8361328b565b9150613f4982613f08565b602082019050919050565b60006020820190508181036000830152613f6d81613f31565b9050919050565b7f20546865207072696365206f662065616368204d445320697320302e3030303160008201527f2065746865722e00000000000000000000000000000000000000000000000000602082015250565b6000613fd060278361328b565b9150613fdb82613f74565b604082019050919050565b60006020820190508181036000830152613fff81613fc3565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614062602c8361328b565b915061406d82614006565b604082019050919050565b6000602082019050818103600083015261409181614055565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061410182613332565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614133576141326140c7565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061417460188361328b565b915061417f8261413e565b602082019050919050565b600060208201905081810360008301526141a381614167565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061420660298361328b565b9150614211826141aa565b604082019050919050565b60006020820190508181036000830152614235816141f9565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061429860268361328b565b91506142a38261423c565b604082019050919050565b600060208201905081810360008301526142c78161428b565b9050919050565b6000819050919050565b6142e1816142ce565b82525050565b600067ffffffffffffffff82169050919050565b614304816142e7565b82525050565b600061ffff82169050919050565b6143218161430a565b82525050565b600060a08201905061433c60008301886142d8565b61434960208301876142fb565b6143566040830186614318565b614363606083018561368e565b614370608083018461368e565b9695505050505050565b6000815190506143898161333c565b92915050565b6000602082840312156143a5576143a46131bb565b5b60006143b38482850161437a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006143f682613332565b915061440183613332565b925082614411576144106143bc565b5b828206905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061447860258361328b565b91506144838261441c565b604082019050919050565b600060208201905081810360008301526144a78161446b565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061450a60248361328b565b9150614515826144ae565b604082019050919050565b60006020820190508181036000830152614539816144fd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061457660208361328b565b915061458182614540565b602082019050919050565b600060208201905081810360008301526145a581614569565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000614608602e8361328b565b9150614613826145ac565b604082019050919050565b60006020820190508181036000830152614637816145fb565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026146a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614663565b6146aa8683614663565b95508019841693508086168417925050509392505050565b6000819050919050565b60006146e76146e26146dd84613332565b6146c2565b613332565b9050919050565b6000819050919050565b614701836146cc565b61471561470d826146ee565b848454614670565b825550505050565b600090565b61472a61471d565b6147358184846146f8565b505050565b5b818110156147595761474e600082614722565b60018101905061473b565b5050565b601f82111561479e5761476f8161463e565b61477884614653565b81016020851015614787578190505b61479b61479385614653565b83018261473a565b50505b505050565b600082821c905092915050565b60006147c1600019846008026147a3565b1980831691505092915050565b60006147da83836147b0565b9150826002028217905092915050565b6147f382613280565b67ffffffffffffffff81111561480c5761480b61348c565b5b6148168254613b22565b61482182828561475d565b600060209050601f8311600181146148545760008415614842578287015190505b61484c85826147ce565b8655506148b4565b601f1984166148628661463e565b60005b8281101561488a57848901518255600182019150602085019450602081019050614865565b868310156148a757848901516148a3601f8916826147b0565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006148f260198361328b565b91506148fd826148bc565b602082019050919050565b60006020820190508181036000830152614921816148e5565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061498460328361328b565b915061498f82614928565b604082019050919050565b600060208201905081810360008301526149b381614977565b9050919050565b600081905092915050565b60006149d082613280565b6149da81856149ba565b93506149ea81856020860161329c565b80840191505092915050565b6000614a0282856149c5565b9150614a0e82846149c5565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000614a4182614a1a565b614a4b8185614a25565b9350614a5b81856020860161329c565b614a64816132c6565b840191505092915050565b6000608082019050614a8460008301876133c7565b614a9160208301866133c7565b614a9e604083018561345d565b8181036060830152614ab08184614a36565b905095945050505050565b600081519050614aca816131f1565b92915050565b600060208284031215614ae657614ae56131bb565b5b6000614af484828501614abb565b91505092915050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000614b5960358361328b565b9150614b6482614afd565b604082019050919050565b60006020820190508181036000830152614b8881614b4c565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614bc560208361328b565b9150614bd082614b8f565b602082019050919050565b60006020820190508181036000830152614bf481614bb8565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614c31601c8361328b565b9150614c3c82614bfb565b602082019050919050565b60006020820190508181036000830152614c6081614c24565b9050919050565b6000614c7282613332565b9150614c7d83613332565b9250828203905081811115614c9557614c946140c7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122034a0a978c158e21f7725505e6aab13a091c72ed79cc95edeb3f69d38a40314aa64736f6c6343000813003368747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d626a337a74627651713250416b43637265565a664274313639396344537257775a524e39435643657a66594168747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d61464c36695951324b765946735644456663414b67334170645837476331416d66527a6e756155364359507968747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d664c563677514468386b435a78554d377359684b38426456727a4a32664b374755476670764874587847504168747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d504c6459384d653431363138576861714c69636b707758727a59783576504869656e454c6842624a7439686a68747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d527333664e4770776b5866596b636f6a44725638696e70334e4757415839436a343159313332315a54706f4c68747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d5a4e5a394a685348315a3236734d704d627a43426633567a506f676b444d7475585757533963656235664e7868747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d627333516347614b616f397050737a7a75597173725568454b43366e6831735851725052597070326678334768747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d536e5a543333416b6d4775554579724d66365038716a4656374e376f7562416a53766832426645694856417668747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d56737568536d5235426d75614e436768557658334233393779794b484e6b533550574d4b79436273326d616a68747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d52615953487250794b79764d627457476839574345516b71626752745668337750657a4b7a77426b4d57584c68747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d5633334a6b52526d524a56797835634d4a4d7364686a4c466d68467163654e4e696458515651346e3539634568747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d5834534c7334534157706b3252537444787732396d7a6b4d5a77446b65456a4b46785a714575686f586f397668747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d5952647771466f3370314545445a754a66394d425175464e634e487570397a44373531575141614253534d3168747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d544150415050757a387835754466564159647171755838614b314d6f7a4b6747796a7a59446168334c35737068747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d546833465436735465394b6644567636315a66334a33517939594650346d363955475a64645a3464654b4e6968747470733a2f2f697066732e66696c65626173652e696f2f697066732f516d5942466b54445264686b367148684850455176455254643744414678703566656352654e5878694555557337",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c806359737ee11161010d578063997dc32e116100a0578063c25c8c9e1161006f578063c25c8c9e1461068a578063c87b56dd146106b5578063e985e9c5146106f2578063f2fde38b1461072f578063f622e7fb14610758576101ee565b8063997dc32e146105d0578063a22cb4651461060d578063ac89d78414610636578063b88d4fde14610661576101ee565b8063715018a6116100dc578063715018a6146105385780637db0b1ff1461054f5780638da5cb5b1461057a57806395d89b41146105a5576101ee565b806359737ee11461046c5780635e1045ec146104955780636352211e146104be57806370a08231146104fb576101ee565b806324f74697116101855780633ccfd60b116101545780633ccfd60b146103f25780633cd29ac8146103fc57806342842e0e146104065780634f6ccce71461042f576101ee565b806324f74697146103485780632f745c59146103735780632fa5cee6146103b057806332871022146103db576101ee565b80631249c58b116101c15780631249c58b146102c157806318160ddd146102cb5780631fe543e3146102f657806323b872dd1461031f576101ee565b806301ffc9a7146101f357806306fdde0314610230578063081812fc1461025b578063095ea7b314610298575b600080fd5b3480156101ff57600080fd5b5061021a6004803603810190610215919061321d565b610783565b6040516102279190613265565b60405180910390f35b34801561023c57600080fd5b50610245610795565b6040516102529190613310565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d9190613368565b610827565b60405161028f91906133d6565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba919061341d565b61086d565b005b6102c9610984565b005b3480156102d757600080fd5b506102e0610aef565b6040516102ed919061346c565b60405180910390f35b34801561030257600080fd5b5061031d600480360381019061031891906135cf565b610afc565b005b34801561032b57600080fd5b506103466004803603810190610341919061362b565b610bbc565b005b34801561035457600080fd5b5061035d610c1c565b60405161036a919061369d565b60405180910390f35b34801561037f57600080fd5b5061039a6004803603810190610395919061341d565b610c40565b6040516103a7919061346c565b60405180910390f35b3480156103bc57600080fd5b506103c5610ce5565b6040516103d2919061372f565b60405180910390f35b3480156103e757600080fd5b506103f0610cf8565b005b6103fa610d69565b005b610404610e17565b005b34801561041257600080fd5b5061042d6004803603810190610428919061362b565b611005565b005b34801561043b57600080fd5b5061045660048036038101906104519190613368565b611025565b604051610463919061346c565b60405180910390f35b34801561047857600080fd5b50610493600480360381019061048e9190613780565b611096565b005b3480156104a157600080fd5b506104bc60048036038101906104b79190613808565b611247565b005b3480156104ca57600080fd5b506104e560048036038101906104e09190613368565b6112f4565b6040516104f291906133d6565b60405180910390f35b34801561050757600080fd5b50610522600480360381019061051d9190613855565b61137a565b60405161052f919061346c565b60405180910390f35b34801561054457600080fd5b5061054d611431565b005b34801561055b57600080fd5b50610564611445565b6040516105719190613891565b60405180910390f35b34801561058657600080fd5b5061058f61144f565b60405161059c91906133d6565b60405180910390f35b3480156105b157600080fd5b506105ba611479565b6040516105c79190613310565b60405180910390f35b3480156105dc57600080fd5b506105f760048036038101906105f29190613368565b61150b565b604051610604919061346c565b60405180910390f35b34801561061957600080fd5b50610634600480360381019061062f91906138d8565b611523565b005b34801561064257600080fd5b5061064b611539565b604051610658919061346c565b60405180910390f35b34801561066d57600080fd5b50610688600480360381019061068391906139cd565b611561565b005b34801561069657600080fd5b5061069f6115c3565b6040516106ac9190613a98565b60405180910390f35b3480156106c157600080fd5b506106dc60048036038101906106d79190613368565b6115da565b6040516106e99190613310565b60405180910390f35b3480156106fe57600080fd5b5061071960048036038101906107149190613ab3565b6115ec565b6040516107269190613265565b60405180910390f35b34801561073b57600080fd5b5061075660048036038101906107519190613855565b611680565b005b34801561076457600080fd5b5061076d611703565b60405161077a9190613891565b60405180910390f35b600061078e82611709565b9050919050565b6060600080546107a490613b22565b80601f01602080910402602001604051908101604052809291908181526020018280546107d090613b22565b801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b5050505050905090565b60006108328261176a565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610878826112f4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df90613bc5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109076117b5565b73ffffffffffffffffffffffffffffffffffffffff1614806109365750610935816109306117b5565b6115ec565b5b610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096c90613c57565b60405180910390fd5b61097f83836117bd565b505050565b600180811115610997576109966136b8565b5b600f60009054906101000a900460ff1660018111156109b9576109b86136b8565b5b146109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f090613cc3565b60405180910390fd5b6601c6bf526340003414610a42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3990613d55565b60405180910390fd5b6001610a4d3361137a565b10610a84576040517f09a6739300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000610aad610aef565b10610ae4576040517f913b742100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aec611876565b50565b6000600880549050905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bae57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610ba5929190613d75565b60405180910390fd5b610bb882826119ec565b5050565b610bcd610bc76117b5565b82611b53565b610c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0390613e10565b60405180910390fd5b610c17838383611be8565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610c4b8361137a565b8210610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8390613ea2565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b601260009054906101000a900460ff1681565b610d00611ee1565b60006001811115610d1457610d136136b8565b5b600f60009054906101000a900460ff166001811115610d3657610d356136b8565b5b03610d67576001600f60006101000a81548160ff02191690836001811115610d6157610d606136b8565b5b02179055505b565b610d71611ee1565b60003373ffffffffffffffffffffffffffffffffffffffff1647604051610d9790613ef3565b60006040518083038185875af1925050503d8060008114610dd4576040519150601f19603f3d011682016040523d82523d6000602084013e610dd9565b606091505b5050905080610e14576040517f65a0789500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006001811115610e2b57610e2a6136b8565b5b600f60009054906101000a900460ff166001811115610e4d57610e4c6136b8565b5b14610e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8490613f54565b60405180910390fd5b655af3107a40003414610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc90613fe6565b60405180910390fd5b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f58576040517f404074ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001610f633361137a565b10610f9a576040517f09a6739300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000610fc3610aef565b10610ffa576040517f913b742100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611002611876565b50565b61102083838360405180602001604052806000815250611561565b505050565b600061102f610aef565b8210611070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106790614078565b60405180910390fd5b6008828154811061108457611083614098565b5b90600052602060002001549050919050565b6011548114611244578060118190555060006110b182611f5f565b9050601260009054906101000a900460ff1660038111156110d5576110d46136b8565b5b8160038111156110e8576110e76136b8565b5b146112425780601260006101000a81548160ff02191690836003811115611112576111116136b8565b5b02179055506000611121610aef565b905060005b8181101561123f5760006013600083815260200190815260200160002054905061122b82600c6000848152602001908152602001600020601260009054906101000a900460ff16600381111561117f5761117e6136b8565b5b60ff168154811061119357611192614098565b5b9060005260206000200180546111a890613b22565b80601f01602080910402602001604051908101604052809291908181526020018280546111d490613b22565b80156112215780601f106111f657610100808354040283529160200191611221565b820191906000526020600020905b81548152906001019060200180831161120457829003601f168201915b5050505050611fa3565b508080611237906140f6565b915050611126565b50505b505b50565b61124f611ee1565b60005b828290508110156112ef576001600e600085858581811061127657611275614098565b5b905060200201602081019061128b9190613855565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806112e7906140f6565b915050611252565b505050565b60008061130083612047565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611371576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113689061418a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e19061421c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611439611ee1565b6114436000612084565b565b6000601154905090565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461148890613b22565b80601f01602080910402602001604051908101604052809291908181526020018280546114b490613b22565b80156115015780601f106114d657610100808354040283529160200191611501565b820191906000526020600020905b8154815290600101906020018083116114e457829003601f168201915b5050505050905090565b60106020528060005260406000206000915090505481565b61153561152e6117b5565b838361214a565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61157261156c6117b5565b83611b53565b6115b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a890613e10565b60405180910390fd5b6115bd848484846122b6565b50505050565b6000600f60009054906101000a900460ff16905090565b60606115e582612312565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611688611ee1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ee906142ae565b60405180910390fd5b61170081612084565b50565b60115481565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611763575061176282612424565b5b9050919050565b6117738161249e565b6117b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a99061418a565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611830836112f4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061188360146124df565b905061188f60146124ed565b600f60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401611954959493929190614327565b6020604051808303816000875af1158015611973573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611997919061438f565b91506119a33382612503565b806010600084815260200190815260200160002081905550817f7b0e05fbeb1edccdd44bd586d531628f90b83bc34de187a0b063ef548a779ac060405160405180910390a25090565b6000600d5482600081518110611a0557611a04614098565b5b6020026020010151611a1791906143eb565b9050600060106000858152602001908152602001600020549050816013600083815260200190815260200160002081905550611b2081600c600085815260200190815260200160002060006003811115611a7457611a736136b8565b5b60ff1681548110611a8857611a87614098565b5b906000526020600020018054611a9d90613b22565b80601f0160208091040260200160405190810160405280929190818152602001828054611ac990613b22565b8015611b165780601f10611aeb57610100808354040283529160200191611b16565b820191906000526020600020905b815481529060010190602001808311611af957829003601f168201915b5050505050611fa3565b837fdd779ccd34929e417fc56a3ffb2acea0e3ce9ff756ef2107f4a75b6b00132aeb60405160405180910390a250505050565b600080611b5f836112f4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ba15750611ba081856115ec565b5b80611bdf57508373ffffffffffffffffffffffffffffffffffffffff16611bc784610827565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611c08826112f4565b73ffffffffffffffffffffffffffffffffffffffff1614611c5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c559061448e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ccd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc490614520565b60405180910390fd5b611cda8383836001612521565b8273ffffffffffffffffffffffffffffffffffffffff16611cfa826112f4565b73ffffffffffffffffffffffffffffffffffffffff1614611d50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d479061448e565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611edc8383836001612533565b505050565b611ee96117b5565b73ffffffffffffffffffffffffffffffffffffffff16611f0761144f565b73ffffffffffffffffffffffffffffffffffffffff1614611f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f549061458c565b60405180910390fd5b565b6000610bb88212611f735760019050611f9e565b6105dc821315611f865760009050611f9e565b6101f4821315611f995760029050611f9e565b600390505b919050565b611fac8261249e565b611feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe29061461e565b60405180910390fd5b80600a6000848152602001908152602001600020908161200b91906147ea565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161203b919061346c565b60405180910390a15050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036121b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121af90614908565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516122a99190613265565b60405180910390a3505050565b6122c1848484611be8565b6122cd84848484612539565b61230c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123039061499a565b60405180910390fd5b50505050565b606061231d8261176a565b6000600a6000848152602001908152602001600020805461233d90613b22565b80601f016020809104026020016040519081016040528092919081815260200182805461236990613b22565b80156123b65780601f1061238b576101008083540402835291602001916123b6565b820191906000526020600020905b81548152906001019060200180831161239957829003601f168201915b5050505050905060006123c76126c0565b905060008151036123dc57819250505061241f565b6000825111156124115780826040516020016123f99291906149f6565b6040516020818303038152906040529250505061241f565b61241a846126d7565b925050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061249757506124968261273f565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166124c083612047565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b61251d828260405180602001604052806000815250612821565b5050565b61252d8484848461287c565b50505050565b50505050565b600061255a8473ffffffffffffffffffffffffffffffffffffffff166129da565b156126b3578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026125836117b5565b8786866040518563ffffffff1660e01b81526004016125a59493929190614a6f565b6020604051808303816000875af19250505080156125e157506040513d601f19601f820116820180604052508101906125de9190614ad0565b60015b612663573d8060008114612611576040519150601f19603f3d011682016040523d82523d6000602084013e612616565b606091505b50600081510361265b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126529061499a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506126b8565b600190505b949350505050565b606060405180602001604052806000815250905090565b60606126e28261176a565b60006126ec6126c0565b9050600081511161270c5760405180602001604052806000815250612737565b80612716846129fd565b6040516020016127279291906149f6565b6040516020818303038152906040525b915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061280a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061281a575061281982612acb565b5b9050919050565b61282b8383612b35565b6128386000848484612539565b612877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286e9061499a565b60405180910390fd5b505050565b61288884848484612d52565b60018111156128cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c390614b6f565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036129135761290e81612d58565b612952565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612951576129508582612da1565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036129945761298f81612f0e565b6129d3565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146129d2576129d18482612fdf565b5b5b5050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060006001612a0c8461305e565b01905060008167ffffffffffffffff811115612a2b57612a2a61348c565b5b6040519080825280601f01601f191660200182016040528015612a5d5781602001600182028036833780820191505090505b509050600082602001820190505b600115612ac0578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612ab457612ab36143bc565b5b04945060008503612a6b575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b9b90614bdb565b60405180910390fd5b612bad8161249e565b15612bed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be490614c47565b60405180910390fd5b612bfb600083836001612521565b612c048161249e565b15612c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3b90614c47565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612d4e600083836001612533565b5050565b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612dae8461137a565b612db89190614c67565b9050600060076000848152602001908152602001600020549050818114612e9d576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612f229190614c67565b9050600060096000848152602001908152602001600020549050600060088381548110612f5257612f51614098565b5b906000526020600020015490508060088381548110612f7457612f73614098565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612fc357612fc2614c9b565b5b6001900381819060005260206000200160009055905550505050565b6000612fea8361137a565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106130bc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816130b2576130b16143bc565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106130f9576d04ee2d6d415b85acef810000000083816130ef576130ee6143bc565b5b0492506020810190505b662386f26fc10000831061312857662386f26fc10000838161311e5761311d6143bc565b5b0492506010810190505b6305f5e1008310613151576305f5e1008381613147576131466143bc565b5b0492506008810190505b612710831061317657612710838161316c5761316b6143bc565b5b0492506004810190505b60648310613199576064838161318f5761318e6143bc565b5b0492506002810190505b600a83106131a8576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131fa816131c5565b811461320557600080fd5b50565b600081359050613217816131f1565b92915050565b600060208284031215613233576132326131bb565b5b600061324184828501613208565b91505092915050565b60008115159050919050565b61325f8161324a565b82525050565b600060208201905061327a6000830184613256565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156132ba57808201518184015260208101905061329f565b60008484015250505050565b6000601f19601f8301169050919050565b60006132e282613280565b6132ec818561328b565b93506132fc81856020860161329c565b613305816132c6565b840191505092915050565b6000602082019050818103600083015261332a81846132d7565b905092915050565b6000819050919050565b61334581613332565b811461335057600080fd5b50565b6000813590506133628161333c565b92915050565b60006020828403121561337e5761337d6131bb565b5b600061338c84828501613353565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006133c082613395565b9050919050565b6133d0816133b5565b82525050565b60006020820190506133eb60008301846133c7565b92915050565b6133fa816133b5565b811461340557600080fd5b50565b600081359050613417816133f1565b92915050565b60008060408385031215613434576134336131bb565b5b600061344285828601613408565b925050602061345385828601613353565b9150509250929050565b61346681613332565b82525050565b6000602082019050613481600083018461345d565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134c4826132c6565b810181811067ffffffffffffffff821117156134e3576134e261348c565b5b80604052505050565b60006134f66131b1565b905061350282826134bb565b919050565b600067ffffffffffffffff8211156135225761352161348c565b5b602082029050602081019050919050565b600080fd5b600061354b61354684613507565b6134ec565b9050808382526020820190506020840283018581111561356e5761356d613533565b5b835b8181101561359757806135838882613353565b845260208401935050602081019050613570565b5050509392505050565b600082601f8301126135b6576135b5613487565b5b81356135c6848260208601613538565b91505092915050565b600080604083850312156135e6576135e56131bb565b5b60006135f485828601613353565b925050602083013567ffffffffffffffff811115613615576136146131c0565b5b613621858286016135a1565b9150509250929050565b600080600060608486031215613644576136436131bb565b5b600061365286828701613408565b935050602061366386828701613408565b925050604061367486828701613353565b9150509250925092565b600063ffffffff82169050919050565b6136978161367e565b82525050565b60006020820190506136b2600083018461368e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106136f8576136f76136b8565b5b50565b6000819050613709826136e7565b919050565b6000613719826136fb565b9050919050565b6137298161370e565b82525050565b60006020820190506137446000830184613720565b92915050565b6000819050919050565b61375d8161374a565b811461376857600080fd5b50565b60008135905061377a81613754565b92915050565b600060208284031215613796576137956131bb565b5b60006137a48482850161376b565b91505092915050565b600080fd5b60008083601f8401126137c8576137c7613487565b5b8235905067ffffffffffffffff8111156137e5576137e46137ad565b5b60208301915083602082028301111561380157613800613533565b5b9250929050565b6000806020838503121561381f5761381e6131bb565b5b600083013567ffffffffffffffff81111561383d5761383c6131c0565b5b613849858286016137b2565b92509250509250929050565b60006020828403121561386b5761386a6131bb565b5b600061387984828501613408565b91505092915050565b61388b8161374a565b82525050565b60006020820190506138a66000830184613882565b92915050565b6138b58161324a565b81146138c057600080fd5b50565b6000813590506138d2816138ac565b92915050565b600080604083850312156138ef576138ee6131bb565b5b60006138fd85828601613408565b925050602061390e858286016138c3565b9150509250929050565b600080fd5b600067ffffffffffffffff8211156139385761393761348c565b5b613941826132c6565b9050602081019050919050565b82818337600083830152505050565b600061397061396b8461391d565b6134ec565b90508281526020810184848401111561398c5761398b613918565b5b61399784828561394e565b509392505050565b600082601f8301126139b4576139b3613487565b5b81356139c484826020860161395d565b91505092915050565b600080600080608085870312156139e7576139e66131bb565b5b60006139f587828801613408565b9450506020613a0687828801613408565b9350506040613a1787828801613353565b925050606085013567ffffffffffffffff811115613a3857613a376131c0565b5b613a448782880161399f565b91505092959194509250565b60028110613a6157613a606136b8565b5b50565b6000819050613a7282613a50565b919050565b6000613a8282613a64565b9050919050565b613a9281613a77565b82525050565b6000602082019050613aad6000830184613a89565b92915050565b60008060408385031215613aca57613ac96131bb565b5b6000613ad885828601613408565b9250506020613ae985828601613408565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613b3a57607f821691505b602082108103613b4d57613b4c613af3565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613baf60218361328b565b9150613bba82613b53565b604082019050919050565b60006020820190508181036000830152613bde81613ba2565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613c41603d8361328b565b9150613c4c82613be5565b604082019050919050565b60006020820190508181036000830152613c7081613c34565b9050919050565b7f4d696e7420686173206e6f74206f70656e656420796574210000000000000000600082015250565b6000613cad60188361328b565b9150613cb882613c77565b602082019050919050565b60006020820190508181036000830152613cdc81613ca0565b9050919050565b7f20546865207072696365206f662065616368204d445320697320302e3030303560008201527f2065746865722e00000000000000000000000000000000000000000000000000602082015250565b6000613d3f60278361328b565b9150613d4a82613ce3565b604082019050919050565b60006020820190508181036000830152613d6e81613d32565b9050919050565b6000604082019050613d8a60008301856133c7565b613d9760208301846133c7565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000613dfa602d8361328b565b9150613e0582613d9e565b604082019050919050565b60006020820190508181036000830152613e2981613ded565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613e8c602b8361328b565b9150613e9782613e30565b604082019050919050565b60006020820190508181036000830152613ebb81613e7f565b9050919050565b600081905092915050565b50565b6000613edd600083613ec2565b9150613ee882613ecd565b600082019050919050565b6000613efe82613ed0565b9150819050919050565b7f5072654d696e7420686173206e6f74206f70656e656420796574210000000000600082015250565b6000613f3e601b8361328b565b9150613f4982613f08565b602082019050919050565b60006020820190508181036000830152613f6d81613f31565b9050919050565b7f20546865207072696365206f662065616368204d445320697320302e3030303160008201527f2065746865722e00000000000000000000000000000000000000000000000000602082015250565b6000613fd060278361328b565b9150613fdb82613f74565b604082019050919050565b60006020820190508181036000830152613fff81613fc3565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000614062602c8361328b565b915061406d82614006565b604082019050919050565b6000602082019050818103600083015261409181614055565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061410182613332565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614133576141326140c7565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061417460188361328b565b915061417f8261413e565b602082019050919050565b600060208201905081810360008301526141a381614167565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061420660298361328b565b9150614211826141aa565b604082019050919050565b60006020820190508181036000830152614235816141f9565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061429860268361328b565b91506142a38261423c565b604082019050919050565b600060208201905081810360008301526142c78161428b565b9050919050565b6000819050919050565b6142e1816142ce565b82525050565b600067ffffffffffffffff82169050919050565b614304816142e7565b82525050565b600061ffff82169050919050565b6143218161430a565b82525050565b600060a08201905061433c60008301886142d8565b61434960208301876142fb565b6143566040830186614318565b614363606083018561368e565b614370608083018461368e565b9695505050505050565b6000815190506143898161333c565b92915050565b6000602082840312156143a5576143a46131bb565b5b60006143b38482850161437a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006143f682613332565b915061440183613332565b925082614411576144106143bc565b5b828206905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061447860258361328b565b91506144838261441c565b604082019050919050565b600060208201905081810360008301526144a78161446b565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061450a60248361328b565b9150614515826144ae565b604082019050919050565b60006020820190508181036000830152614539816144fd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061457660208361328b565b915061458182614540565b602082019050919050565b600060208201905081810360008301526145a581614569565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000614608602e8361328b565b9150614613826145ac565b604082019050919050565b60006020820190508181036000830152614637816145fb565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026146a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614663565b6146aa8683614663565b95508019841693508086168417925050509392505050565b6000819050919050565b60006146e76146e26146dd84613332565b6146c2565b613332565b9050919050565b6000819050919050565b614701836146cc565b61471561470d826146ee565b848454614670565b825550505050565b600090565b61472a61471d565b6147358184846146f8565b505050565b5b818110156147595761474e600082614722565b60018101905061473b565b5050565b601f82111561479e5761476f8161463e565b61477884614653565b81016020851015614787578190505b61479b61479385614653565b83018261473a565b50505b505050565b600082821c905092915050565b60006147c1600019846008026147a3565b1980831691505092915050565b60006147da83836147b0565b9150826002028217905092915050565b6147f382613280565b67ffffffffffffffff81111561480c5761480b61348c565b5b6148168254613b22565b61482182828561475d565b600060209050601f8311600181146148545760008415614842578287015190505b61484c85826147ce565b8655506148b4565b601f1984166148628661463e565b60005b8281101561488a57848901518255600182019150602085019450602081019050614865565b868310156148a757848901516148a3601f8916826147b0565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006148f260198361328b565b91506148fd826148bc565b602082019050919050565b60006020820190508181036000830152614921816148e5565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061498460328361328b565b915061498f82614928565b604082019050919050565b600060208201905081810360008301526149b381614977565b9050919050565b600081905092915050565b60006149d082613280565b6149da81856149ba565b93506149ea81856020860161329c565b80840191505092915050565b6000614a0282856149c5565b9150614a0e82846149c5565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000614a4182614a1a565b614a4b8185614a25565b9350614a5b81856020860161329c565b614a64816132c6565b840191505092915050565b6000608082019050614a8460008301876133c7565b614a9160208301866133c7565b614a9e604083018561345d565b8181036060830152614ab08184614a36565b905095945050505050565b600081519050614aca816131f1565b92915050565b600060208284031215614ae657614ae56131bb565b5b6000614af484828501614abb565b91505092915050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000614b5960358361328b565b9150614b6482614afd565b604082019050919050565b60006020820190508181036000830152614b8881614b4c565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614bc560208361328b565b9150614bd082614b8f565b602082019050919050565b60006020820190508181036000830152614bf481614bb8565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614c31601c8361328b565b9150614c3c82614bfb565b602082019050919050565b60006020820190508181036000830152614c6081614c24565b9050919050565b6000614c7282613332565b9150614c7d83613332565b9250828203905081811115614c9557614c946140c7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122034a0a978c158e21f7725505e6aab13a091c72ed79cc95edeb3f69d38a40314aa64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "hardcode for SEPOLIA 0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625  hardcode for Goerli  0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3924,
        "contract": "contracts/Models.sol:Models",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3926,
        "contract": "contracts/Models.sol:Models",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3930,
        "contract": "contracts/Models.sol:Models",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3934,
        "contract": "contracts/Models.sol:Models",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3938,
        "contract": "contracts/Models.sol:Models",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3944,
        "contract": "contracts/Models.sol:Models",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4974,
        "contract": "contracts/Models.sol:Models",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4978,
        "contract": "contracts/Models.sol:Models",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4981,
        "contract": "contracts/Models.sol:Models",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4985,
        "contract": "contracts/Models.sol:Models",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5329,
        "contract": "contracts/Models.sol:Models",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3765,
        "contract": "contracts/Models.sol:Models",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 7321,
        "contract": "contracts/Models.sol:Models",
        "label": "allMetaData",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 7323,
        "contract": "contracts/Models.sol:Models",
        "label": "lengthOfMetaData",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 7327,
        "contract": "contracts/Models.sol:Models",
        "label": "whiteList",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7332,
        "contract": "contracts/Models.sol:Models",
        "label": "currentWindowState",
        "offset": 0,
        "slot": "15",
        "type": "t_enum(WindowState)7369"
      },
      {
        "astId": 7335,
        "contract": "contracts/Models.sol:Models",
        "label": "COORDINATOR",
        "offset": 1,
        "slot": "15",
        "type": "t_contract(VRFCoordinatorV2Interface)1709"
      },
      {
        "astId": 7351,
        "contract": "contracts/Models.sol:Models",
        "label": "resToToken",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7354,
        "contract": "contracts/Models.sol:Models",
        "label": "currentDegree",
        "offset": 0,
        "slot": "17",
        "type": "t_int256"
      },
      {
        "astId": 7359,
        "contract": "contracts/Models.sol:Models",
        "label": "currentDegreeLevel",
        "offset": 0,
        "slot": "18",
        "type": "t_enum(DegreeState)7374"
      },
      {
        "astId": 7363,
        "contract": "contracts/Models.sol:Models",
        "label": "tokenIdtoModeValue",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7366,
        "contract": "contracts/Models.sol:Models",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(Counter)5885_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(VRFCoordinatorV2Interface)1709": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(DegreeState)7374": {
        "encoding": "inplace",
        "label": "enum Models.DegreeState",
        "numberOfBytes": "1"
      },
      "t_enum(WindowState)7369": {
        "encoding": "inplace",
        "label": "enum Models.WindowState",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5885_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 5884,
            "contract": "contracts/Models.sol:Models",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}